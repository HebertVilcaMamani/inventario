#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('login:server');
var http = require('http');
//var localtunnel = require('localtunnel');
var port = normalizePort(process.env.PORT || '3000');
//var tunnel = localtunnel(port, function(err, tunnel) {
//    if (err)

    // the assigned public url for your tunnel
    // i.e. https://abcdefgjhij.localtunnel.me
  //  tunnel.url;

//    console.log(tunnel.url)
//});

//tunnel.on('close', function() {
    // tunnels are closed
//});


app.set('port', port);

http.createServer(function (req, res) {
}).listen(3000, '127.0.0.1');
//console.log('Server running at http://172.26.70.158:3000/');
console.log('Server running at http://192.168.2.12:3000/');


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
